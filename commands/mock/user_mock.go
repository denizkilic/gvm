// Code generated by MockGen. DO NOT EDIT.
// Source: use.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPackageUser is a mock of PackageUser interface
type MockPackageUser struct {
	ctrl     *gomock.Controller
	recorder *MockPackageUserMockRecorder
}

// MockPackageUserMockRecorder is the mock recorder for MockPackageUser
type MockPackageUserMockRecorder struct {
	mock *MockPackageUser
}

// NewMockPackageUser creates a new mock instance
func NewMockPackageUser(ctrl *gomock.Controller) *MockPackageUser {
	mock := &MockPackageUser{ctrl: ctrl}
	mock.recorder = &MockPackageUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackageUser) EXPECT() *MockPackageUserMockRecorder {
	return m.recorder
}

// UseGoPackage mocks base method
func (m *MockPackageUser) UseGoPackage(version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseGoPackage", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseGoPackage indicates an expected call of UseGoPackage
func (mr *MockPackageUserMockRecorder) UseGoPackage(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseGoPackage", reflect.TypeOf((*MockPackageUser)(nil).UseGoPackage), version)
}

// CheckGoPackageExistence mocks base method
func (m *MockPackageUser) CheckGoPackageExistence(version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGoPackageExistence", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckGoPackageExistence indicates an expected call of CheckGoPackageExistence
func (mr *MockPackageUserMockRecorder) CheckGoPackageExistence(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGoPackageExistence", reflect.TypeOf((*MockPackageUser)(nil).CheckGoPackageExistence), version)
}
